application:
  configuration:
    configuration.operating-system: { "image": "us-west-2/ami-8bbda2ea", "identity": "centos" }
    configuration.memberTargetQuantity: 3
    configuration.hardwareId-member: "m3.medium"
  interfaces:
    configuration:
      hardwareId-member: bind(dockerCluster#input.hardwareId-member)
      operating-system: bind( dockerCluster#input.operating-system)
      memberTargetQuantity: bind(dockerCluster#input.memberTargetQuantity)
    endpoints:
      "*": bind(dockerCluster#result.*)
  components:
    dockerCluster:
      type: workflow.Instance
      interfaces:
        input:
          hardwareId-member:
            type: configuration(string)
            name: member Amazon image size
          memberTargetQuantity: 
            type: configuration(int)
            name: member numbers
          operating-system: 
             type: configuration(map<string,object>)
             name: Compatible image
             suggestions:
                  "CentOS7 [us-west-2]": { "image": "us-west-2/ami-8bbda2ea", "identity": "centos" }
        result:
          hosts: publish-signal(list<string>)
          etcd: publish-signal(list<string>)
          machine-ids: publish-signal(list<string>)
      configuration:
        configuration.workflows:
          launch: 
            steps:
              - provisionCluster:
                  action: provisionVms
                  parameters:
                    imageId: "{$.operating-system.image}"
                    hardwareId: m3.medium
                    vmIdentity: "{$.operating-system.identity}"
                    #subnetId: "subnet-6229513b"
                    targetQuantity: "{$.memberTargetQuantity}"
                    roleName: docker
                    blockDeviceMapping:
                      "/dev/sda1":
                        ebs:
                          volumeSize: 15
                          deleteOnTermination: true
                      "/dev/sdb": ephemeral0
                  output:
                    ips: ips
                    privateips: privateips
              - provision-single-node:
                  action: provisionVms
                  precedingPhases: [ provisionCluster ]
                  parameters:
                    hardwareId: ""
                    retryCount: 0
                    vmIdentity: "{$.operating-system.identity}"
                    roleName: single
                    staticIps: ["{$.ips[0]}"]
              - update-machine-id:
                  action: execrun
                  precedingPhases: [provision-single-node]
                  parameters:
                    isSudo: true
                    roles: [docker]
                    command:
                      - |
                        echo "" >/etc/machine-id
                        systemd-machine-id-setup
                        cat /etc/machine-id
                  output:
                    machine-ids: stdout
              - etcd-initial-cluster:
                  action: serialize
                  precedingPhases: [ update-machine-id ]
                  parameters:
                    format: CSV
                    input: [ "{$.privateips}=http://{$.privateips}:2380" ]
                  output:
                    etcd_cluster: serialized
              - install-etcd-service:
                  action: execrun
                  precedingPhases: [etcd-initial-cluster]
                  parameters:
                    isSudo: true
                    roles: [docker]
                    command:
                      - |
                        yum install -y etcd
                        ETCD_CLUSTER=`echo {$.etcd_cluster}`
                        cat <<EEND > /etc/etcd/etcd.conf
                        ETCD_NAME=`hostname -i`
                        ETCD_DATA_DIR="/var/lib/etcd/default.etcd"
                        ETCD_LISTEN_PEER_URLS="http://`hostname -i`:2380"
                        ETCD_LISTEN_CLIENT_URLS="http://0.0.0.0:2379"
                        ETCD_INITIAL_CLUSTER="$$ETCD_CLUSTER"
                        ETCD_INITIAL_ADVERTISE_PEER_URLS="http://`hostname -i`:2380"
                        EEND
              - install-docker:
                  action: execrun
                  precedingPhases: [install-etcd-service]
                  parameters:
                    isSudo: true
                    roles: [docker]
                    command:
                      - |
                        curl -sSL https://get.docker.com/ | sh
              - update-docker-service:
                  action: execrun
                  precedingPhases: [install-docker]
                  parameters:
                    isSudo: true
                    roles: [docker]
                    command:
                      - |
                        cat <<EEND >/usr/lib/systemd/system/docker.service
                        [Unit]
                        Description=Docker Application Container Engine
                        Documentation=https://docs.docker.com
                        After=network.target docker.socket
                        Requires=docker.socket
                        
                        [Service]
                        Type=notify
                        Environment=/etc/sysconfig/docker
                        ExecStart=/usr/bin/docker daemon -H fd:// -H 0.0.0.0:2376 --cluster-store etcd://127.0.0.1:2379 --cluster-advertise=`hostname -i`:2376
                        MountFlags=slave
                        LimitNOFILE=1048576
                        LimitNPROC=1048576
                        LimitCORE=infinity
                        
                        [Install]
                        WantedBy=multi-user.target
                        EEND
              - install-fleet:
                  action: execrun
                  precedingPhases: [install-docker]
                  parameters:
                    isSudo: true
                    roles: [docker]
                    command:
                      - |
                        curl -kLO https://github.com/coreos/fleet/releases/download/v0.11.5/fleet-v0.11.5-linux-amd64.tar.gz
                        tar -zxf fleet-v0.11.5-linux-amd64.tar.gz
                        mv fleet-v0.11.5-linux-amd64/* /usr/local/bin/
                        cat <<EEND > /etc/systemd/system/fleet.service
                        [Unit]
                        Description=fleet
                        
                        [Service]
                        Environment=FLEET_PUBLIC_IP=`hostname -i`
                        Environment=FLEET_METADATA="public_ip=`hostname -i`,region=us-west-2,instance-type=m3.medium"
                        Environment=FLEET_ETCD_SERVERS="http://127.0.0.1:2379"
                        Environment=FLEET_SSH_USERNAME="{$.operating-system.identity}"
                        ExecStart=/usr/local/bin/fleetd
                        User=root
                        Group=root
                        EEND
                        cat <<EEND > /etc/systemd/system/fleet.socket
                        [Unit]
                        Description=Fleet API Socket
                        PartOf=fleet.service
                        
                        [Socket]
                        ListenStream=/var/run/fleet.sock
                        EEND
              - generate-ssh-key:
                  action: execrun
                  precedingPhases: [install-fleet]
                  parameters:
                    isSudo: false
                    roles: [ docker ]
                    command:
                      - |
                        ssh-keygen -q -t rsa -f ~/.ssh/id_rsa -N ''
                        cat ~/.ssh/id_rsa.pub
                        echo 'eval `ssh-agent`' >> ~/.bash_profile
                        echo 'ssh-add ~/.ssh/id_rsa' >> ~/.bash_profile
                        echo 'export FLEETCTL_SSH_USERNAME={$.operating-system.identity}' >> ~/.bash_profile
                  output:
                    stdout: stdout
              - serialize:
                  action: serialize
                  precedingPhases: [ generate-ssh-key ]
                  parameters:
                    format: CSV
                    input: "{$.stdout[*]}"
                  output:
                    pubkeys: serialized
              - update-authorized-hosts:
                  action: execrun
                  precedingPhases: [serialize]
                  parameters:
                    isSudo: false
                    roles: [ docker ]
                    command:
                      - |
                        cat <<EEND | xargs -n 1 echo >> ~/.ssh/authorized_keys
                        {$.pubkeys}
                        EEND
              - start-services:
                  action: execrun
                  precedingPhases: [update-authorized-hosts]
                  parameters:
                    isSudo: true
                    roles: [ docker ]
                    command:
                      - |
                        systemctl daemon-reload
                        systemctl enable etcd.service
                        systemctl enable fleet.socket
                        systemctl enable fleet.service
                        systemctl enable docker.service
                        systemctl start etcd.service
                        systemctl start fleet.socket
                        systemctl start fleet.service
                        systemctl start docker.service
              - create-docker-network:
                  action: execrun
                  precedingPhases: [start-services]
                  parameters:
                    isSudo: true
                    roles: [ single ]
                    command:
                      - |
                        docker network create --driver overlay SkyNet
                        
            return:
              hosts:
                value: "{$.ips}"
              etcd:
                value: "http://{$.ips}:2379/v2/keys/docker/"
              machine-ids:
                value: "{$.machine-ids[*]}"
   
